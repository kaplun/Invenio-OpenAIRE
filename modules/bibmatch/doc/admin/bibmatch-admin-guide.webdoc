## -*- mode: html; coding: utf-8; -*-

## This file is part of Invenio.
## Copyright (C) 2007, 2008, 2010, 2011 CERN.
##
## Invenio is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License as
## published by the Free Software Foundation; either version 2 of the
## License, or (at your option) any later version.
##
## Invenio is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
## General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with Invenio; if not, write to the Free Software Foundation, Inc.,
## 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

<!-- WebDoc-Page-Title: BibMatch Admin Guide -->
<!-- WebDoc-Page-Navtrail: <a class="navtrail" href="<CFG_SITE_URL>/help/admin<lang:link/>">_(Admin Area)_</a> -->
<!-- WebDoc-Page-Revision: $Id$ -->

<p>BibMatch matches bibliographic data in a MARCXML file against the
database content. With a MARCXML input file, the produced output shows
a selection of records in the input that match the database content.
This way, it is possible to identify potential duplicate entries,
before they are uploaded in a database. </p>

<p>Note: BibMatch only matches against public records attached to the
home collection.</p>

<h4>BibMatch commmand-line tool</h4>

<blockquote>
<pre>

 QUERYSTRINGS
     Querystrings determine which type of query/strategy to use when searching for the
     matching records in the database.

   Predefined querystrings:

     There are some predefined querystrings available:

     title             - standard title search. (i.e. "this is a title") (default)
     title-author      - title and author search (i.e. "this is a title AND Lastname, F")
     reportnumber      - reportnumber search (i.e. reportnumber:REP-NO-123).

     You can also add your own predefined querystrings inside invenio.conf file.

     You can structure your query in different ways:

     * Old-style: fieldnames separated by '||' (conforms with earlier BibMatch versions):
       -q "773__p||100__a"

     * New-style: Invenio query syntax with "bracket syntax":
       -q "773__p:\"[773__p]\" 100__a:[100__a]"

     Depending on the structure of the query, it will fetch associated values from each record and put it into
     the final search query. i.e in the above example it will put journal-title from 773__p.

     When more then one value/datafield is found, i.e. when looking for 700__a (additional authors),
     several queries will be put together to make sure all combinations of values are accounted for.
     The queries are separated with given operator (-o, --operator) value.

     Note: You can add more then one query to a search, just give more (-q, --query-string) arguments.
     The results of all queries will be combined when matching.

   BibConvert formats:

     Another option to further improve your matching strategy is to use BibConvert formats. By using the formats
     available by BibConvert you can change the values from the retrieved record-fields.

     i.e. using WORDS(1,R) will only return the first (1) word from the right (R). This can be very useful when
     adjusting your matching parameters to better match the content. For example only getting authors last-name
     instead of full-name.

     You can use these formats directly in the querystrings (indicated by '::'):

     * Old-style: -q "100__a::WORDS(1,R)::DOWN()"
       This query will take first word from the right from 100__a and also convert it to lower-case.

     * New-style: -q "100__a:[100__a::WORDS(1,R)::DOWN()]"

     See BibConvert documentation for a more detailed explanation of formats.

   Predefined fields:

     In addition to specifying distinct MARC fields in the querystrings you can use predefined
     fields as configured in the LOCAL(!) Invenio system. These fields will then be mapped to one
     or more fieldtags to be retrieved from input records.

     Common predefined fields used in querystrings: (for Invenio demo site, your fields may vary!)

     'abstract', 'affiliation', 'anyfield', 'author', 'coden', 'collaboration',
     'collection', 'datecreated', 'datemodified', 'division', 'exactauthor',
     'experiment', 'fulltext', 'isbn', 'issn', 'journal', 'keyword', 'recid',
     'reference', 'reportnumber', 'subject', 'title', 'year'

</pre>
</blockquote>

<h4>Examples</h4>

To match records on title in the title index, also print out only new (unmatched) ones:

<blockquote>
<pre>
 $ bibmatch [--print-new] -q "[title]" --field=\"title\" < input.xml > output.xml
</pre>
</blockquote>

To print potential duplicate entries before manual upload using predefined queries, use:

<blockquote>
<pre>
 $ bibmatch --print-match -q title-author < input.xml > output.xml
</pre>
</blockquote>

Two options for matching on multiple fields, including predefined fields (title, author etc.):

<blockquote>
<pre>
 #1:
   $ bibmatch --query-string=\"[245__a] [author]" < input.xml > output.xml
 #2:
   $ bibmatch --query-string=\"245__a||author\" < input.xml > output.xml
</pre>
</blockquote>

To print "fuzzy" (almost matching by title) records:

<blockquote>
<pre>
 $ bibmatch --print-fuzzy  < input.xml > output.xml
</pre>
</blockquote>

To match against public records on an remote Invenio installation (i.e http://cdsweb.cern.ch):

<blockquote>
<pre>
 $ bibmatch --print-match -i input.xml -r 'http://cdsweb.cern.ch'
</pre>
</blockquote>

Using text-marc as output-format:

<blockquote>
<pre>
 $ bibmatch -b out.marc -t < input.xml
</pre>
</blockquote>

To print matched or fuzzy matched records replacing old identifier
(controlfield 001) with one from the matched record, i.e to then be
used with BibUpload to update record:

<blockquote>
<pre>
 $ bibmatch -a -1 < input.xml > modified_match.xml
</pre>
</blockquote>

To match using BibConvert formats to manipulate fieldvalues. See <a href="<CFG_SITE_URL>/help/admin/bibconvert-admin-guide<lang:link/>">BibConvert Admin Guide</a> for more details on formats:

<blockquote>
<pre>
 $ bibmatch --query-string=\"[245__a] [100__a::WORDS(1,R)::DOWN()]" < input.xml > output.xml
</pre>
</blockquote>

To match records in specific collection(s):

<blockquote>
<pre>
 $ bibmatch -x 'Books,Articles' < input.xml
</pre>
</blockquote>

Command line options:

<blockquote>
<pre>
 Output:

 -0 --print-new (default) print unmatched in stdout
 -1 --print-match print matched records in stdout
 -2 --print-ambiguous print records that match more than 1 existing records
 -3 --print-fuzzy print records that match the longest words in existing records

 -b --batch-output=(filename). filename.new will be new records, filename.matched will be matched,
      filename.ambiguous will be ambiguous, filename.fuzzy will be fuzzy match
 -t --text-marc-output transform the output to text-marc format instead of the default MARCXML

 Simple query:

 -q --query-string=(search-query/predefined-query) See "Querystring"-section below.
 -f --field=(field)

 General options:

 -n   --noprocess          Do not print records in stdout.
 -i,  --input              use a named file instead of stdin for input
 -v,  --verbose=LEVEL      verbose level (from 0 to 9, default 1)
 -r,  --remote=URL         match against a remote Invenio installation (Full URL, no trailing '/')
                           Beware: Only searches public records attached to home collection
 -a,  --alter-recid        The recid (controlfield 001) of matched or fuzzy matched records in
                           output will be replaced by the 001 value of the matched record.
                           Note: Useful if you want to replace matched records using BibUpload.
 -z,  --clean              clean queries before searching

 -h,  --help               print this help and exit
 -V,  --version            print version information and exit

 Advanced options:

 -c --config=filename      load querystrings from a config file. Each line starting with QRYSTR will
                           be added as a query. i.e. QRYSTR --- [title] [author]

 -x --collection           only perform queries in certain collection(s).
                           Note: matching against restricted collections does not work.

 -m --mode=(a|e|o|p|r)     perform an advanced search using special search mode.
                             Where mode is:
                               "a" all of the words,
                               "o" any of the words,
                               "e" exact phrase,
                               "p" partial phrase,
                               "r" regular expression.

 -o --operator(a|o)        used to concatenate identical fields in search query (i.e. several report-numbers)
                             Where operator is:
                               "a" boolean AND (default)
                               "o" boolean OR
</pre>
</blockquote>
